/**
 * Class containing all the methods to access the Oura API with OAuth2 Authentication.
 *
 * @class OuraOAuth
 * @author Pinta <https://github.com/Pinta365>
 * @license MIT
 */ import OuraBase from "./OuraBase.js";
import type { ApiOptionsBase } from "./OuraBase.js";
import type { OAuth2TokenResponse } from "./utilsOAuth.js";
import type { OAuthScope } from "./types/oura.js";
/**
 * Options for configuring the Oura OAuth API client.
 */ interface ApiOptionsOAuth extends ApiOptionsBase {
  /** Oura API client ID. */ clientId?: string;
  /** Oura API client secret. */ clientSecret?: string;
  /** The redirect URI where Oura will send the user after authorization. */ redirectUri?: string;
}
/**
 * Base class for the OuraOAuth API.
 * Class containing all the methods to access the Oura API with OAuth2 Authentication.
 */ declare class OuraOAuth extends OuraBase {
  /**
     * Creates a new Oura API client.
     *
     * @constructor
     * @param {ApiOptionsOAuth} options - Options object containing the configuration settings.
     * @throws {MissingClientIdError} If the `clientId` option is missing.
     * @throws {MissingClientSecretError} If the `clientSecret` option is missing.
     * @throws {MissingRedirectUriError} If the `redirectUri` option is missing.
     */ constructor(options: ApiOptionsOAuth);
  /**
     * Fetches data from the Oura API using an OAuth2 access token.
     *
     * @protected
     * @param {string} endpoint - The API endpoint URL.
     * @param {Record<string, string>} [params] - Optional query parameters.
     * @param {string} accessToken - Access token required for OAuth-driven calls.
     * @returns {Promise<unknown>} A promise that resolves with the fetched data (either an array or a single object).
     * @throws {MissingTokenError} If the `accessToken` is missing.
     */ protected override fetchData(endpoint: string, params?: Record<string, string>, accessToken?: string): Promise<unknown>;
  /**
     * Generates the authorization URL for the Oura OAuth2 flow.
     *
     * @param {OAuthScope[]} scopes - An array of scopes to request access to (e.g., ['email', 'daily']).
     * @param {string} [state] - An optional state parameter for security and session management.
     * @returns {string} The authorization URL.
     */ generateAuthUrl(scopes: OAuthScope[], state?: string): string;
  /**
     * Exchanges an authorization code for an access token and refresh token.
     *
     * @param {string} code - The authorization code received from Oura.
     * @returns {Promise<OAuth2TokenResponse>} A promise that resolves with the token response.
     */ exchangeCodeForToken(code: string): Promise<OAuth2TokenResponse>;
  /**
     * Refreshes an expired OAuth2 access token using a refresh token.
     *
     * @param {string} suppliedRefreshToken - The refresh token obtained during the initial OAuth2 authorization.
     * @returns {Promise<OAuth2TokenResponse>} A promise that resolves with a new access token and (potentially) a new refresh token.
     */ refreshAccessToken(suppliedRefreshToken: string): Promise<OAuth2TokenResponse>;
  /**
     * Revoke an OAuth2 access token.
     *
     * @param {string} accessToken - The access token to revoke.
     * @returns {Promise<boolean>} A promise that resolves when the token is successfully revoked.
     */ revokeAccessToken(accessToken: string): Promise<boolean>;
}
export default OuraOAuth;
//# sourceMappingURL=OuraOAuth.d.ts.map