/**
 * Class containing all the methods to access the Oura Webhook Subscription API with a client id and client secret.
 *
 * @class Webhook
 * @author Pinta <https://github.com/Pinta365>
 * @license MIT
 */ import type { DataType, DeletedSubscription, EventType, Subscription } from "./types/webhook.js";
/**
 * Base class for the Oura Webhook Subscription API
 * Class containing all the methods to access the Oura Webhook Subscription API with a client id and client secret.
 */ declare class Webhook {
  /**
     * Creates a new Webhook API client.
     *
     * @constructor
     * @param {string} clientId - A client id generated at the Oura Cloud website.
     * @param {string} clientSecret - A client secret generated at the Oura Cloud website.
     * @throws {Error} Throws an error if the client id or client secret is missing.
     */ constructor(clientId: string, clientSecret: string);
  /**
     * Retrieves a list of current active webhook subscriptions.
     *
     * @returns {Promise<Subscription[]>} An array of Subscription typed objects.
     */ listSubscriptions(): Promise<Subscription[]>;
  /**
     * Retrieves a specific webhook subscription by id.
     *
     * @param {string} id - Subscription id in string format.
     * @returns {Promise<Subscription>} A Subscription typed object.
     */ getSubscription(id: string): Promise<Subscription>;
  /**
     * Creates a new webhook subscription. See setup documentation on the Oura Developer website
     * for a detailed description of the creation workflow.
     *
     * @param {string} callbackUrl - Your callback URL used by Oura to post subscription events to.
     * @param {string} verificationToken - Your verification token used to verify Oura's calls to your API.
     * @param {EventType} eventType - One of the EventTypes.
     * @param {DataType} dataType - One of the DataTypes.
     * @returns {Promise<Subscription>} A Subscription typed object of the created subscription.
     */ createSubscription(callbackUrl: string, verificationToken: string, eventType: EventType, dataType: DataType): Promise<Subscription>;
  /**
     * Updates a webhook subscription.
     *
     * @param {string} id - Subscription id in string format.
     * @param {string} verificationToken - Your verification token used to verify Oura's calls to your API.
     * @param {string} [callbackUrl] - Callback URL used by Oura to post subscriptions to.
     * @param {EventType} [eventType] - One of the EventTypes.
     * @param {DataType} [dataType] - One of the DataTypes.
     * @returns {Promise<Subscription>} A Subscription typed object of the updated subscription.
     */ updateSubscription(id: string, verificationToken: string, callbackUrl?: string, eventType?: EventType, dataType?: DataType): Promise<Subscription>;
  /**
     * Deletes a webhook subscription.
     *
     * @param {string} id - Subscription id in string format.
     * @returns {Promise<DeletedSubscription>} A DeletedSubscription typed object.
     */ deleteSubscription(id: string): Promise<DeletedSubscription>;
  /**
     * Renews the expiration time of a webhook subscription.
     *
     * @param {string} id - Subscription id in string format.
     * @returns {Promise<Subscription>} A Subscription typed object of the renewed subscription.
     */ renewSubscription(id: string): Promise<Subscription>;
}
export default Webhook;
//# sourceMappingURL=Webhook.d.ts.map