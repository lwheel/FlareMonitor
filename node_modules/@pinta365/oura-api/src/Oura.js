/**
 * Class containing all the methods to access the Oura API with a personal access token.
 *
 * @class Oura
 * @author Pinta <https://github.com/Pinta365>
 * @license MIT
 */ import OuraBase from "./OuraBase.js";
import { MissingTokenError } from "./utils.js";
/**
 * Base class for the Oura API.
 * Class containing all the methods to access the Oura API with a personal access token.
 */ class Oura extends OuraBase {
  #personalAccesstoken;
  /**
     * Creates a new Oura API client.
     *
     * @constructor
     * @param {string | ApiOptionsAccessToken} accessTokenOrOptions - Either a personal access token (string) generated at the Oura Cloud website, or an options object containing the configuration settings.
     * @throws {MissingTokenError} If the access token is missing.
     */ constructor(options){
    // If a string is provided, assume it's the access token
    if (typeof options === "string") {
      options = {
        accessToken: options
      };
    }
    super(options);
    if (options.accessToken) {
      this.#personalAccesstoken = options.accessToken;
    } else if (!options.useSandbox) {
      throw new MissingTokenError();
    }
  }
  /**
     * Fetches data from the Oura API using the stored personal access token.
     *
     * @protected
     * @override
     * @param {string} endpoint - The API endpoint URL.
     * @param {Record<string, string>} [params] - Optional query parameters.
     * @returns {Promise<unknown>} A promise that resolves with the fetched data (either an array or a single object).
     */ fetchData(endpoint, params) {
    return this.getAll(this.#personalAccesstoken, endpoint, params);
  }
}
export default Oura;
//# sourceMappingURL=Oura.js.map